* using log directory ‘/tmp/RtmpXMgjCE/telemetr.Rcheck’
* using R version 4.4.2 (2024-10-31)
* using platform: x86_64-pc-linux-gnu
* R was compiled by
    gcc (Debian 12.2.0-14) 12.2.0
    GNU Fortran (Debian 12.2.0-14) 12.2.0
* running under: Debian GNU/Linux 12 (bookworm)
* using session charset: UTF-8
* using options ‘--no-manual --as-cran’
* checking for file ‘telemetr/DESCRIPTION’ ... OK
* checking extension type ... Package
* this is package ‘telemetr’ version ‘0.3’
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking serialization versions ... OK
* checking whether package ‘telemetr’ can be installed ... WARNING
Found the following significant warnings:
  Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
  Warning: Array reference at (1) out of bounds (2 > 1) in loop beginning at (2)
  Warning: Fortran 2018 deleted feature: Shared DO termination label 10 at (1)
  Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 10 at (1)
  Warning: Fortran 2018 deleted feature: Shared DO termination label 15 at (1)
  Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 15 at (1)
See ‘/tmp/RtmpXMgjCE/telemetr.Rcheck/00install.out’ for details.
* used Fortran compiler: ‘GNU Fortran (Debian 12.2.0-14) 12.2.0’
* checking installed package size ... OK
* checking package directory ... OK
* checking for future file timestamps ... NOTE
unable to verify current time
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... NOTE
License components which are templates and need '+ file LICENSE':
  MIT
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking code files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... WARNING
'library' or 'require' call not declared from: ‘circular’
'library' or 'require' call to ‘circular’ in package code.
  Please use :: or requireNamespace() instead.
  See section 'Suggested packages' in the 'Writing R Extensions' manual.
Packages in Depends field not imported from:
  ‘lattice’ ‘plyr’ ‘sp’
  These packages need to be imported from (in the NAMESPACE file)
  for when this namespace is loaded but not attached.
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... NOTE
.getCoords: no visible global function definition for ‘coordinates’
.getxybg: no visible global function definition for
  ‘latticeParseFormula’
.jacknife: no visible global function definition for ‘cor’
.xymedianmedian: no visible global function definition for ‘ddply’
.xymedianmedian : <anonymous>: no visible global function definition
  for ‘median’
.xymedianmedian: no visible global function definition for ‘median’
drawVectors: no visible global function definition for ‘par’
drawVectors: no visible global function definition for ‘segments’
makeMoreTriData: no visible global function definition for ‘adply’
makeMoreTriData: no visible global function definition for
  ‘coordinates<-’
makeTriData : ranpt: no visible global function definition for ‘runif’
makeTriData: no visible global function definition for ‘rnorm’
triand: no visible global function definition for ‘cov2cor’
triang: no visible global function definition for ‘ddply’
triang: no visible global function definition for ‘coordinates<-’
triang: no visible global function definition for ‘proj4string<-’
triang: no visible global function definition for ‘proj4string’
trihub: no visible global function definition for ‘cov2cor’
trimle: no visible global function definition for ‘cov2cor’
Undefined global functions or variables:
  adply coordinates coordinates<- cor cov2cor ddply latticeParseFormula
  median par proj4string proj4string<- rnorm runif segments
Consider adding
  importFrom("graphics", "par", "segments")
  importFrom("stats", "cor", "cov2cor", "median", "rnorm", "runif")
to your NAMESPACE file.
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd line widths ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... WARNING
Undocumented data sets:
  ‘otterBases’ ‘otterSurvey’ ‘otterTruth’
All user-level objects in a package should have documentation entries.
See chapter ‘Writing R documentation files’ in the ‘Writing R
Extensions’ manual.
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... WARNING
Undocumented arguments in Rd file 'mlefield.Rd'
  ‘r’ ‘xy’ ‘bearing’ ‘kappa’

Functions with \usage entries need to have the appropriate \alias
entries, and all their arguments documented.
The \usage entries must correspond to syntactically valid R code.
See chapter ‘Writing R documentation files’ in the ‘Writing R
Extensions’ manual.
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking contents of ‘data’ directory ... OK
* checking data for non-ASCII characters ... OK
* checking data for ASCII and uncompressed saves ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking pragmas in C/C++ headers and code ... OK
* checking compilation flags used ... OK
* checking compiled code ... NOTE
File ‘telemetr/libs/telemetr.so’:
  Found ‘_gfortran_st_read’, possibly from ‘read’ (Fortran)
    Object: ‘atof.o’
File ‘telemetr/libs/telemetr.so’:
  Found no calls to: ‘R_registerRoutines’, ‘R_useDynamicSymbols’

Compiled code should not call entry points which might terminate R nor
write to stdout/stderr instead of to the console, nor use Fortran I/O
nor system RNGs nor [v]sprintf.
It is good practice to register native routines and to disable symbol
search.

See ‘Writing portable packages’ in the ‘Writing R Extensions’ manual.
* checking usage of KIND in Fortran files ... OK
* checking sizes of PDF files under ‘inst/doc’ ... OK
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... NONE
* checking for unstated dependencies in vignettes ... NOTE
'library' or 'require' call not declared from: ‘ggplot2’
* checking package vignettes ... OK
* checking re-building of vignette outputs ... ERROR
Error(s) in re-building vignettes:
  ...
--- re-building ‘telemetry.Rnw’ using Sweave
Loading required package: lattice
Loading required package: sp
Loading required package: plyr

Error: processing vignette 'telemetry.Rnw' failed with diagnostics:
 chunk 1 
Error in library(ggplot2) : there is no package called ‘ggplot2’

--- failed re-building ‘telemetry.Rnw’

SUMMARY: processing the following file failed:
  ‘telemetry.Rnw’

Error: Vignette re-building failed.
Execution halted

* checking for non-standard things in the check directory ... OK
* checking for detritus in the temp directory ... OK
* DONE
Status: 1 ERROR, 4 WARNINGs, 5 NOTEs
